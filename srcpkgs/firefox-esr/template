# Template build file for 'firefox-esr'.
pkgname=firefox-esr
version=45.5.0
revision=1
wrksrc="firefox-${version}esr"
short_desc="Lightweight gecko-based web browser"
maintainer="Eivind Uggedal <eivind@uggedal.com>"
homepage="https://www.mozilla.org/en-US/firefox/organizations/"
license="MPL-1.1, GPL-2, LGPL-2.1"
distfiles="${MOZILLA_SITE}/firefox/releases/${version}esr/source/firefox-${version}esr.source.tar.xz"
checksum=3e843ca257bf64e11e547e9afdbce797838eb6e01449d2f313c0d1d3117450f1

only_for_archs="i686 i686-musl x86_64 x86_64-musl"
nopie=yes
lib32disabled=yes
build_options="gtk3"
desc_option_gtk3="Build the GTK+3 toolkit UI"

hostmakedepends="unzip zip pkg-config perl python yasm"
makedepends="
 nss-devel libjpeg-turbo-devel libpng-devel gtk+-devel
 icu-devel pixman-devel sqlite-devel pulseaudio-devel
 libevent-devel libnotify-devel libvpx-devel libXrender-devel
 startup-notification-devel dbus-glib-devel alsa-lib-devel
 hunspell-devel libXcomposite-devel libSM-devel libXScrnSaver-devel
 libXt-devel libXdamage-devel  $(vopt_if gtk3 gtk+3-devel)"
depends="nss>=3.21 desktop-file-utils hicolor-icon-theme"
conflicts="firefox>=0"

CXXFLAGS="-std=c++11"

if [ ${XBPS_GCC_VERSION_MAJOR} -gt 5 ]; then
	# Append CFLAGS and CXXFLAGS to set work around code which gcc6 would
	# otherwise regard as out-of-specification and allow it to produce a
	# working program.
	CFLAGS+=" -fno-delete-null-pointer-checks -fno-lifetime-dse -fno-schedule-insns2"
	CXXFLAGS+=" -fno-delete-null-pointer-checks -fno-lifetime-dse -fno-schedule-insns2"
fi

pre_configure() {
	case "$XBPS_TARGET_MACHINE" in
	*-musl)
		$XBPS_FETCH_CMD http://git.alpinelinux.org/cgit/aports/plain/community/firefox-esr/stab.h
		mv stab.h toolkit/crashreporter/google-breakpad/src/
		;;
	esac

	# configure script misdetects the preprocessor without an optimization level
	sed -i '/ac_cpp=/s/$CPPFLAGS/& -O2/' configure

	# Google API key (see http://www.chromium.org/developers/how-tos/api-keys)
	# Note: This is for Void Linux use ONLY.
	_google_api_key="AIzaSyCIFdBA7eQP43R6kXRwTq7j6Mvj1ITze90"
	echo -n "$_google_api_key" > google-api-key
	[ ! -d xbps-build ] && mkdir -p xbps-build
}
do_configure() {
	local _args

	case "$XBPS_TARGET_MACHINE" in
	*-musl) # XXX gold linking with --hash-style=sysv results in unhidden symbols
		# XXX see https://sourceware.org/ml/binutils/2014-09/msg00230.html
		#
		# XXX disable jemalloc.
		_args+=" --disable-jemalloc --enable-gold=no"
		;;
	esac

	if [ "$CROSS_BUILD" ]; then
		_args+=" --target=$XBPS_CROSS_TRIPLET --disable-jemalloc"

		# Make config/system_wrappers/alsa/alsalib.h and pulse/pulse.h find
		# the required includes. Set system nspr and nss include paths.
		export HOST_CFLAGS="${XBPS_CFLAGS}"
		export HOST_CXXFLAGS="${XBPS_CXXFLAGS}"
		export CFLAGS+=" -I${XBPS_CROSS_BASE}/usr/include/alsa \
			-I${XBPS_CROSS_BASE}/usr/include/pulse \
			-I${XBPS_CROSS_BASE}/usr/include/nspr \
			-I${XBPS_CROSS_BASE}/usr/include/nss"
		export CXXFLAGS+=" ${CFLAGS}"
		export LDFLAGS+=" -L${XBPS_CROSS_BASE}/usr/lib"

		export ac_cv_sqlite_secure_delete=yes \
			ac_cv_sqlite_threadsafe=yes \
			ac_cv_sqlite_enable_fts3=yes \
			ac_cv_sqlite_dbstat_vtab=yes \
			ac_cv_sqlite_enable_unlock_notify=yes \
			ac_cv_prog_hostcxx_works=1
	fi

	mkdir -p /usr/lib/firefox
	export LDFLAGS+=" -Wl,-rpath=/usr/lib/firefox"

	if [ "$build_option_gtk3" ]; then
		_args+=" --enable-default-toolkit=cairo-gtk3"
	else
		_args+=" --enable-default-toolkit=cairo-gtk2"
	fi

	cd xbps-build
	# XXX build without --system-cairo. See:
	# - https://github.com/voidlinux/void-packages/issues/2308#issuecomment-135426813
	# - https://bugs.gentoo.org/show_bug.cgi?id=558150
	SHELL=/bin/bash ../configure --prefix=/usr --libdir=/usr/lib \
		--with-system-nspr --with-system-nss --with-system-bz2  \
		--with-system-jpeg --with-system-zlib --without-system-png \
		--with-system-libevent --with-system-libvpx \
		--enable-system-pixman --enable-system-hunspell --enable-system-sqlite \
		--enable-system-ffi --enable-startup-notification --disable-gio \
		--with-pthreads --enable-official-branding --enable-safe-browsing \
		--disable-skia --disable-debug --disable-gnomevfs --disable-gconf \
		--disable-crashreporter --disable-updater --disable-xprint --disable-tests \
		--disable-mochitest --disable-installer --disable-elf-hack \
		--with-system-icu --enable-pulseaudio --disable-gstreamer \
		--disable-crashreporter --disable-cpp-exceptions --disable-javaxpcom \
		--with-nspr-prefix=${XBPS_CROSS_BASE}/usr \
		--with-nss-prefix=${XBPS_CROSS_BASE}/usr \
		--with-google-api-keyfile="${wrksrc}/google-api-key" \
		--enable-optimize="$CFLAGS" --disable-strip --disable-install-strip \
		--disable-static --enable-pie --disable-profiling \
		--disable-profilelocking ${_args}
}
do_build() {
	if [ "$SOURCE_DATE_EPOCH" ]; then
		mozdate="MOZ_BUILD_DATE=$(date --date "@$SOURCE_DATE_EPOCH" "+%Y%m%d%H%M%S")"
	fi
	cd xbps-build
	SHELL=/bin/bash make ${mozdate} ${makejobs}
}
do_install() {
	cd xbps-build
	make DESTDIR=${DESTDIR} install

	vinstall ${FILESDIR}/vendor.js 644 usr/lib/firefox/browser/defaults/preferences
	vinstall ${FILESDIR}/firefox.desktop 644 usr/share/applications

	for i in 16x16 22x22 24x24 32x32 48x48 256x256; do
		vinstall ${wrksrc}/browser/branding/official/default${i%x*}.png 644 \
			usr/share/icons/hicolor/${i}/apps firefox.png
	done

	# Use system-provided dictionaries
	rm -rf ${DESTDIR}/usr/lib/firefox/{dictionaries,hyphenation}
	ln -s /usr/share/hunspell ${DESTDIR}/usr/lib/firefox/dictionaries
	ln -s /usr/share/hyphen ${DESTDIR}/usr/lib/firefox/hyphenation

	# We don't want the development stuff
	rm -rf ${DESTDIR}/usr/{include,lib/firefox-devel,share/idl}

	# https://bugzilla.mozilla.org/show_bug.cgi?id=658850
	ln -sf firefox ${DESTDIR}/usr/lib/firefox/firefox-bin
}
